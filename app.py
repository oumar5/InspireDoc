import streamlit as st
import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire racine au path pour les imports
sys.path.append(str(Path(__file__).parent))

# Configuration de la page
st.set_page_config(
    page_title="InspireDoc",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #2c3e50;
        margin-bottom: 2rem;
    }
    
    .sub-header {
        font-size: 1.5rem;
        color: #34495e;
        text-align: center;
        margin-bottom: 3rem;
    }
    
    .feature-box {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #3498db;
        margin: 1rem 0;
    }
    
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    
    .info-box {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def main():
    """
    Application principale InspireDoc.
    """
    
    # En-t√™te principal
    st.markdown('<h1 class="main-header">üìù InspireDoc</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">G√©n√©rateur intelligent de documents bas√© sur l\'IA</p>', unsafe_allow_html=True)
    
    # Sidebar pour la navigation
    with st.sidebar:
        st.title("Navigation")
        
        # Menu de navigation
        page = st.selectbox(
            "Choisir une page",
            ["üè† Accueil", "‚ö° G√©n√©ration", "‚öôÔ∏è Param√®tres", "‚ÑπÔ∏è √Ä propos"]
        )
    
    # Routage des pages
    if page == "üè† Accueil":
        show_home_page()
    elif page == "‚ö° G√©n√©ration":
        show_generation_page()
    elif page == "‚öôÔ∏è Param√®tres":
        show_settings_page()
    elif page == "‚ÑπÔ∏è √Ä propos":
        show_about_page()

def show_home_page():
    """
    Page d'accueil.
    """
    st.header("Bienvenue sur InspireDoc")
    
    # Description
    st.markdown("""
    InspireDoc est un outil intelligent qui vous permet de g√©n√©rer automatiquement des documents 
    en vous inspirant d'exemples existants et en utilisant vos documents sources.
    """)
    
    # Fonctionnalit√©s principales
    st.subheader("üöÄ Fonctionnalit√©s principales")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="feature-box">
            <h4>üìÑ Upload de documents</h4>
            <p>Support√©: PDF, TXT, DOCX</p>
            <ul>
                <li>Documents sources (contenu)</li>
                <li>Documents exemples (style)</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-box">
            <h4>ü§ñ G√©n√©ration IA</h4>
            <p>Utilise GPT-4o pour g√©n√©rer des documents intelligents</p>
            <ul>
                <li>Respect du style des exemples</li>
                <li>Contenu bas√© sur les sources</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="feature-box">
            <h4>üé® Rendu Markdown</h4>
            <p>Affichage √©l√©gant et professionnel</p>
            <ul>
                <li>Pr√©visualisation en temps r√©el</li>
                <li>Mise en forme pr√©serv√©e</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="feature-box">
            <h4>üì• Export multi-format</h4>
            <p>Exportez vos documents g√©n√©r√©s</p>
            <ul>
                <li>PDF avec styles personnalis√©s</li>
                <li>DOCX compatible Office</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Guide de d√©marrage rapide
    st.subheader("üéØ D√©marrage rapide")
    
    st.markdown("""
    1. **Pr√©parez vos documents** : Rassemblez vos documents sources (contenu) et exemples (style)
    2. **Allez √† la page G√©n√©ration** : Utilisez le menu de navigation
    3. **Uploadez vos fichiers** : Glissez-d√©posez ou s√©lectionnez vos documents
    4. **D√©crivez votre demande** : Expliquez quel type de document vous voulez g√©n√©rer
    5. **G√©n√©rez et exportez** : Laissez l'IA cr√©er votre document et exportez-le
    """)
    
    # Statut du syst√®me
    st.subheader("üîß Statut du syst√®me")
    
    try:
        from core.services.document_service import DocumentService
        service = DocumentService()
        status = service.get_service_status()
        
        if status.get('service_initialized', False):
            st.markdown('<div class="success-box">‚úÖ Service InspireDoc initialis√© avec succ√®s</div>', unsafe_allow_html=True)
            
            if status.get('llm_connection', False):
                st.markdown('<div class="success-box">‚úÖ Connexion LLM op√©rationnelle</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div class="error-box">‚ùå Probl√®me de connexion LLM</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="error-box">‚ùå Erreur d\'initialisation du service</div>', unsafe_allow_html=True)
            if 'error' in status:
                st.error(f"Erreur: {status['error']}")
    
    except Exception as e:
        st.markdown('<div class="error-box">‚ùå Impossible de v√©rifier le statut du syst√®me</div>', unsafe_allow_html=True)
        st.error(f"Erreur: {str(e)}")
        st.markdown("""
        <div class="info-box">
            <strong>Configuration requise:</strong><br>
            Assurez-vous que les variables d'environnement suivantes sont d√©finies:
            <ul>
                <li><code>GPT4O_API_KEY</code> - Votre cl√© API GPT-4o</li>
                <li><code>GPT4O_ENDPOINT</code> - L'endpoint de votre service GPT-4o</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

def show_generation_page():
    """
    Page de g√©n√©ration de documents.
    """
    try:
        from pages.generation import show_generation_interface
        show_generation_interface()
    except ImportError as e:
        st.error(f"Erreur d'import de la page de g√©n√©ration: {str(e)}")
        st.info("La page de g√©n√©ration sera bient√¥t disponible.")

def show_settings_page():
    """
    Page des param√®tres.
    """
    try:
        from pages.settings import show_settings_interface
        show_settings_interface()
    except ImportError as e:
        st.error(f"Erreur d'import de la page des param√®tres: {str(e)}")
        st.info("La page des param√®tres sera bient√¥t disponible.")

def show_about_page():
    """
    Page √† propos.
    """
    try:
        from pages.about import show_about_interface
        show_about_interface()
    except ImportError as e:
        st.error(f"Erreur d'import de la page √† propos: {str(e)}")
        st.info("La page √† propos sera bient√¥t disponible.")

if __name__ == "__main__":
    main()